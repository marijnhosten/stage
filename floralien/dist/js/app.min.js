var Animations=function(){"use strict";function t(t,e){var n=$(e),o=140;n.css({width:"0","-webkit-clip-path":"inset(0px 0px 0px 0px)"});var i=setInterval(function(){o-=1,n.css({width:"140px","-webkit-clip-path":"inset(0px "+o+"px 0px 0px)"}),0===o&&(clearInterval(i),n.css({width:"0","-webkit-clip-path":"inset(0px 0px 0px 0px)"}),document.location.href=t)},430)}function e(t,e){t.animate({left:e+"%"},1500,function(){})}function n(t,e,n){t.animate({left:n,top:e+"%"},1500,function(){})}function o(t){t.animate({left:"84%",top:"85%"},2e3)}function i(){if(document.location.href.indexOf("step1_2")>-1)var t=setTimeout(function(){a($("#tutorThumb2"),2,41,250),clearTimeout(t)},8500);if(document.location.href.indexOf("step1_2")>-1)var e=setTimeout(function(){a($("#tutorThumb4"),4,30,165),clearTimeout(e)},11500)}function a(t,e,n,o){r(t,n,e),c(e,o)}function r(t,e,n){s(t,n),l(t,n),t.animate({left:e+"%"},1500)}function l(t,e){var n=0,o=3e3;if(document.location.href.indexOf("step1_2")>-1)var i=setInterval(function(){n=860-t.position().left,$("#tutBlackImg"+e).css({"-webkit-clip-path":"inset(0px "+n+"px 0px 0px)"}),o-=3,0===o&&clearInterval(i)},10)}function c(t,e){var n=$("#tutSlider"+t+" .rangeValue");n.animate({left:e+"%"},1500)}function s(t,e){var n,o=0,i=3e3;if(document.location.href.indexOf("step1_2")>-1)var a=setInterval(function(){n=t.position().left/800*100,1===e&&(o=Math.round(n/100*8+8)),2===e&&(o=Math.round(n/100*5+5)),3===e&&(o=Math.round(n/100*20+10)),4===e&&(o=Math.round(n/100*13+2)),5===e&&(o=Math.floor(Math.round(n/100*514+380))),n>0&&101>n&&$("#tutSlider"+e+" .rangeValue .strong").text(o),i-=30,0===i&&clearInterval(a)},100)}function u(t){$(t[0]).animate({width:"100%"},500);var e=setTimeout(function(){$(t[1]).animate({width:"100%"},500),clearTimeout(e)},100),n=setTimeout(function(){$(t[2]).animate({width:"100%"},500),clearTimeout(n)},200),o=setTimeout(function(){$(t[3]).animate({width:"100%"},500),clearTimeout(o)},300),i=setTimeout(function(){$(t[4]).animate({width:"100%"},500),clearTimeout(i)},400)}function p(t){$(t[0]).animate({width:"100%"},500);var e=setTimeout(function(){$(t[1]).animate({width:"100%"},500),clearTimeout(e)},100),n=setTimeout(function(){$(t[2]).animate({width:"100%"},500),clearTimeout(n)},200),o=setTimeout(function(){$(t[3]).animate({width:"100%"},500),clearTimeout(o)},300),i=setTimeout(function(){$(t[4]).animate({width:"100%"},500),clearTimeout(i)},400);$(t[5]).animate({opacity:1},500);var a=setTimeout(function(){$(t[6]).animate({opacity:1},500),clearTimeout(a)},100),r=setTimeout(function(){$(t[7]).animate({opacity:1},500),clearTimeout(r)},200),l=setTimeout(function(){$(t[8]).animate({opacity:1},500),clearTimeout(l)},300),c=setTimeout(function(){$(t[9]).animate({opacity:1},500),clearTimeout(c)},400)}var m=function(){t("#/","#loadingEnd")},f=function(){var t=$(".scene"),a="21.5%";if(i(),document.location.href.indexOf("step1_2")>-1)var r=setTimeout(function(){e(t,90),e(t,75),e(t,90),clearTimeout(r)},2e3);if(document.location.href.indexOf("step1_2")>-1)var l=setTimeout(function(){n(t,30,a),e(t,40),clearTimeout(l)},7e3);if(document.location.href.indexOf("step1_2")>-1)var c=setTimeout(function(){n(t,65,a),e(t,35),clearTimeout(c)},9500);if(document.location.href.indexOf("step1_2")>-1)var s=setTimeout(function(){o(t),clearTimeout(s)},12500)},d=function(){var t=$(".game");$.each(t,function(){u(t)})},h=function(){var t=$(".end");$.each(t,function(){p(t)})};return{step3Slider:m,tutorialAnimations:f,slideInGame:d,slideInfo:h}}();!function(){"use strict";var t=angular.module("app",["ngRoute","ngAnimate"]);t.config(["$routeProvider",function(t){t.when("/",{templateUrl:"./dist/pages/intro.html",controller:"mainController"}).when("/step1_1",{templateUrl:"./dist/pages/step1_1.html",controller:"mainController"}).when("/step1_2",{templateUrl:"./dist/pages/step1_2.html",controller:"mainController"}).when("/step1_3",{templateUrl:"./dist/pages/step1_3.html",controller:"mainController"}).when("/step2",{templateUrl:"./dist/pages/step2.html",controller:"mainController"}).when("/step3",{templateUrl:"./dist/pages/step3.html",controller:"mainController"}).when("/end",{templateUrl:"./dist/pages/end.html",controller:"mainController"}).otherwise({redirectTo:"/"})}])}();var Slider=function(){"use strict";var t=function(){function t(t){var i=parseFloat(t.target.id.split("g")[1])-1,a="#thumb"+parseFloat(t.target.id.split("g")[1]);e(t,a,i),n(a,i),o(a,i)}function e(t,e,n){var o,i=n+1,a=$(".thumbDrag").css("width").split("p")[0],r=t.pageX-380-a/2;r>-80&&930>r&&($("#thumbDrag"+i).css({left:r}),o=r+a/2-10,$(e).css({left:o})),-60>=r&&($("#thumbDrag"+i).css({left:"-65px"}),o=0,$(e).css({left:o})),r>=910&&($("#thumbDrag"+i).css({left:930}),o=980,$(e).css({left:o}));var l=990-$(e).position().left;$("#blackImg"+i).css({"-webkit-clip-path":"inset(0px "+l+"px 0px 0px)"})}function n(t,e){var n=$("#slider"+ ++e+" .rangeValue"),o=n.position().left,i=$(t).position().left;o>-100&&980>=i&&n.css({left:i-95})}function o(t,e){var n=$(t).position().left/915*100,o=0;0===e&&(o=Math.round(n/100*8+8)),1===e&&(o=Math.round(n/100*5+5)),2===e&&(o=Math.round(n/100*20+10)),3===e&&(o=Math.round(n/100*13+2)),4===e&&(o=Math.floor(Math.round(n/100*514+380))),n>0&&101>n&&$("#slider"+ ++e+" .rangeValue .strong").text(o)}var i=[$("#slider1"),$("#slider2"),$("#slider3"),$("#slider4"),$("#slider5")],a=[$("#thumb1"),$("#thumb2"),$("#thumb3"),$("#thumb4"),$("#thumb5")];interact(".draggable").draggable({inertia:!1,restrict:{restriction:"parent",endOnly:!0,elementRect:{top:0,left:1,bottom:0,right:0}},autoScroll:!1,max:1/0,onmove:t,onend:function(t){}}),interact.maxInteractions(1/0),$.each(a,function(t,a){i[t].on("mousedown",function(i){e(i,a,t),n(a,t),o(a,t)})})},e=function(){$(".endTimer").css({display:"block"})};return{startSliders:t,stopSliders:e}}();!function(){"use strict";var t=function(t,e){function n(){var t=$(".timerKlein");t.text("01:00"),p(59,t)}function o(t){i(t)}function i(t){var e,n,o,i,l;$.each(t,function(t,a){0===t&&(8===a&&(e=0),16>=a&&a>=13&&(e=0),9===a&&(e=1),10===a&&(e=2),11===a&&(e=4),12===a&&(e=5)),1===t&&(5!==a&&6!==a||(n=1),7===a&&(n=2),8===a&&(n=3),9===a&&(n=4),10===a&&(n=5)),2===t&&(18>=a&&(o=1),a>25&&31>a&&(o=2),a>21&&24>a&&(o=3),a>17&&21>a&&(o=4),a>19&&22>a&&(o=5)),3===t&&(a>0&&5>=a&&(i=1),a>5&&10>=a&&(i=2),a>10&&15>=a&&(i=4)),4===t&&(a>200&&400>=a&&(l=1),a>400&&600>=a&&(l=3),a>600&&900>=a&&(l=4))});var c=[e,n,o,i,l],s=c.sort(r),u=s[2];a(u)}function a(t){var e=$(".winningPlant img"),n=$(".vervangingPlant img");$(e[0]).animate({opacity:0},3e3),3!==t&&4!==t||$(n[0]).css({top:"0"}),n[0].src="./dist/images/plant_0"+t+".jpg",3!==t&&4!==t||$(n[0]).css({position:"relative",top:"-40px",height:"650px"}),5===t&&$(n[0]).css({position:"relative",top:"-60px",height:"670px"}),$(n[0]).css({opacity:0}),$(n[0]).animate({opacity:1},3e3)}function r(t,e){return t-e}function l(){var t=localStorage.getItem("clock"),e=localStorage.getItem("rain"),n=localStorage.getItem("temp"),i=localStorage.getItem("sun"),a=localStorage.getItem("co2");Animations.step3Slider(),$(".yourValue #clock").text(t),$(".yourValue #rain").text(e),$(".yourValue #temp").text(n),$(".yourValue #sun").text(i),$(".yourValue #co2").text(a);var r=[parseInt(t),parseInt(e),parseInt(n),parseInt(i),parseInt(a)];o(r)}function c(t){$.ajax({type:"GET",url:"./dist/data/"+t+".json",async:!0,dataType:"json",error:function(t){console.log(t)}}).done(function(t){s(t)})}function s(t){for(var e=0,n=t.length;n>e;e++)$(t[e]["class"]).text(t[e].text),7==e&&$(t[e]["class"]).html("<span>co<sub>2 </sub>").append(t[e].text+"</span>")}function u(){var t=$("#tmrStop"),n=$(".countdown"),o=$(".upsidedown");$(".infoText");e.path().indexOf("step2")>-1&&m(29,n,o,t),n.text("00:30"),o.text("00:30")}function p(t,e){var n,o,i=t,a=setInterval(function(){n=parseInt(i/60,10),o=parseInt(i%60,10),n=10>n?"0"+n:n,o=10>o?"0"+o:o,e.text(n+":"+o),--i<0&&clearInterval(a)},1e3)}function m(t,e,n,o){var i,a,r=t,l=!1,c=setInterval(function(){i=parseInt(r/60,10),a=parseInt(r%60,10),i=10>i?"0"+i:i,a=10>a?"0"+a:a,e.text(i+":"+a),n.text(i+":"+a),--r<0&&(clearInterval(c),f(l))},1e3);o.click(function(){l=!0,clearInterval(c),f(l)})}function f(n){d(),Slider.stopSliders(),n&&t.$apply(function(){e.path("/step3")});var o=setTimeout(function(){clearTimeout(o),n||t.$apply(function(){e.path("/step3")})},2e3)}function d(){localStorage.setItem("clock",$("#clock")[0].innerHTML),localStorage.setItem("rain",$("#rain")[0].innerHTML),localStorage.setItem("temp",$("#temp")[0].innerHTML),localStorage.setItem("sun",$("#sun")[0].innerHTML),localStorage.setItem("co2",$("#co2")[0].innerHTML)}if(-1==e.path().indexOf("step1_")&&(t.page="main"),e.path().indexOf("step1_")>-1&&c(localStorage.getItem("lang")),e.path().indexOf("step2")>-1){$(".logo img").attr("draggable",!1),c(localStorage.getItem("lang")),Slider.startSliders(),Animations.slideInGame();var h=$(".lockScreen");h.css({display:"block"});var g=setTimeout(function(){clearTimeout(g),u(),h.css({display:"none"})},2e3)}e.path().indexOf("step3")>-1&&(c(localStorage.getItem("lang")),l(),Animations.slideInfo(),n()),t["continue"]=function(){$("#end").css({display:"none"})},t.changeView=function(t,n){"false"!==n&&("nl"==n?localStorage.setItem("lang",n):"en"==n&&localStorage.setItem("lang",n)),e.path(t)}};angular.module("app").controller("mainController",["$scope","$location",t])}(),function(){"use strict";var t=function(t,e){var n=$(".lockScreen");if(n.css({display:"block"}),e.path().indexOf("step1_1")>-1){var o=!1;n.one("touchstart",function(){o=!0,clearTimeout(i)});var i=setTimeout(function(){o||(clearTimeout(i),t.$apply(function(){e.path("/step1_2")}))},25e3)}if(e.path().indexOf("step1_2")>-1){Animations.tutorialAnimations();var a=!1;n.one("touchstart",function(){a=!0,clearTimeout(r)});var r=setTimeout(function(){a||(clearTimeout(r),t.$apply(function(){e.path("/step1_3")}))},18e3)}if(e.path().indexOf("step1_3")>-1){var l=!1;n.one("touchstart",function(){l=!0,clearTimeout(c)});var c=setTimeout(function(){l||(clearTimeout(c),t.$apply(function(){e.path("/step2")}))},15e3)}t.nextStep=function(t){e.path(t)}};angular.module("app").controller("progressController",["$scope","$location",t])}();
//# sourceMappingURL=data:application/json;base64,
